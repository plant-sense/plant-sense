// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Plant defines model for plant.
type Plant struct {
	CommonName     string             `json:"common_name"`
	Id             openapi_types.UUID `json:"id"`
	ScientificName string             `json:"scientific_name"`
}

// PlantRequirements defines model for plant_requirements.
type PlantRequirements struct {
	Plant        Plant        `json:"plant"`
	Requirements Requirements `json:"requirements"`
}

// Requirement defines model for requirement.
type Requirement struct {
	Max  float64 `json:"max"`
	Min  float64 `json:"min"`
	Unit string  `json:"unit"`
}

// Requirements defines model for requirements.
type Requirements struct {
	LightIntensity Requirement `json:"light_intensity"`
	SoilMoisture   Requirement `json:"soil_moisture"`
	Temperature    Requirement `json:"temperature"`
}

// SearchRequest defines model for search_request.
type SearchRequest struct {
	Name *string `json:"name,omitempty"`
}

// PostSearchJSONRequestBody defines body for PostSearch for application/json ContentType.
type PostSearchJSONRequestBody = SearchRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /facts)
	GetFacts(w http.ResponseWriter, r *http.Request)

	// (GET /facts/{id})
	GetFactsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (GET /requirements/{id})
	GetRequirementsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (POST /search)
	PostSearch(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /facts)
func (_ Unimplemented) GetFacts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /facts/{id})
func (_ Unimplemented) GetFactsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /requirements/{id})
func (_ Unimplemented) GetRequirementsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /search)
func (_ Unimplemented) PostSearch(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetFacts operation middleware
func (siw *ServerInterfaceWrapper) GetFacts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFacts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFactsId operation middleware
func (siw *ServerInterfaceWrapper) GetFactsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFactsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRequirementsId operation middleware
func (siw *ServerInterfaceWrapper) GetRequirementsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRequirementsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSearch operation middleware
func (siw *ServerInterfaceWrapper) PostSearch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSearch(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/facts", wrapper.GetFacts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/facts/{id}", wrapper.GetFactsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/requirements/{id}", wrapper.GetRequirementsId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/search", wrapper.PostSearch)
	})

	return r
}

type GetFactsRequestObject struct {
}

type GetFactsResponseObject interface {
	VisitGetFactsResponse(w http.ResponseWriter) error
}

type GetFacts200JSONResponse []PlantRequirements

func (response GetFacts200JSONResponse) VisitGetFactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFacts500Response struct {
}

func (response GetFacts500Response) VisitGetFactsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetFactsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetFactsIdResponseObject interface {
	VisitGetFactsIdResponse(w http.ResponseWriter) error
}

type GetFactsId200JSONResponse Plant

func (response GetFactsId200JSONResponse) VisitGetFactsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFactsId404Response struct {
}

func (response GetFactsId404Response) VisitGetFactsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetFactsId500Response struct {
}

func (response GetFactsId500Response) VisitGetFactsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetRequirementsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetRequirementsIdResponseObject interface {
	VisitGetRequirementsIdResponse(w http.ResponseWriter) error
}

type GetRequirementsId200JSONResponse Requirements

func (response GetRequirementsId200JSONResponse) VisitGetRequirementsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRequirementsId404Response struct {
}

func (response GetRequirementsId404Response) VisitGetRequirementsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetRequirementsId500Response struct {
}

func (response GetRequirementsId500Response) VisitGetRequirementsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostSearchRequestObject struct {
	Body *PostSearchJSONRequestBody
}

type PostSearchResponseObject interface {
	VisitPostSearchResponse(w http.ResponseWriter) error
}

type PostSearch200JSONResponse []Plant

func (response PostSearch200JSONResponse) VisitPostSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSearch400Response struct {
}

func (response PostSearch400Response) VisitPostSearchResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostSearch500Response struct {
}

func (response PostSearch500Response) VisitPostSearchResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /facts)
	GetFacts(ctx context.Context, request GetFactsRequestObject) (GetFactsResponseObject, error)

	// (GET /facts/{id})
	GetFactsId(ctx context.Context, request GetFactsIdRequestObject) (GetFactsIdResponseObject, error)

	// (GET /requirements/{id})
	GetRequirementsId(ctx context.Context, request GetRequirementsIdRequestObject) (GetRequirementsIdResponseObject, error)

	// (POST /search)
	PostSearch(ctx context.Context, request PostSearchRequestObject) (PostSearchResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetFacts operation middleware
func (sh *strictHandler) GetFacts(w http.ResponseWriter, r *http.Request) {
	var request GetFactsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFacts(ctx, request.(GetFactsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFacts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFactsResponseObject); ok {
		if err := validResponse.VisitGetFactsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFactsId operation middleware
func (sh *strictHandler) GetFactsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetFactsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFactsId(ctx, request.(GetFactsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFactsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFactsIdResponseObject); ok {
		if err := validResponse.VisitGetFactsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRequirementsId operation middleware
func (sh *strictHandler) GetRequirementsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetRequirementsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRequirementsId(ctx, request.(GetRequirementsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRequirementsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRequirementsIdResponseObject); ok {
		if err := validResponse.VisitGetRequirementsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSearch operation middleware
func (sh *strictHandler) PostSearch(w http.ResponseWriter, r *http.Request) {
	var request PostSearchRequestObject

	var body PostSearchJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSearch(ctx, request.(PostSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSearch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSearchResponseObject); ok {
		if err := validResponse.VisitPostSearchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SV3WrbTBCGb0XM9x2qltqmEHQYSosptKE9DMZspHE0RfuT2VGoCbr3srtubMlO7aQl",
	"0LO1ND/v++xofA+11c4aNOKhugdft6hVPLpOGYkHtg5ZCOPj2mptzdIojeGnrB1CBV6YzA0MOVATHq8s",
	"ayVQQd9TA/l+mK8JjdCK6sdKDTkw3vbE2EB1BbHMbvP9GoshT6qXm0T9y9bYwoOz/xlXUMF/xRZCsSFQ",
	"pKCtiIdav0saxU4dpIqTgotxh32xWv0YAW1sf93hFqnp9TVyEKrJnBjZG5LjxEO9PPbfZCwO0BiL7eim",
	"lSUZQeNJ1k/AFWfCUrfUlrz0jE/MFdQOWT05c+J5t8xUUL5nLwDxqLhu48ShP3B/j033EFqTWdn4kqQL",
	"by/DiGQrVYvPPPId1aHtHbIna6CCcvZ6Vga71qFRjqCCt7NyVkIOTkkbGxYxPZxuMOqx0RFZM2+ggo8o",
	"H2JAMO6dNT7pfFOW6fMO7mKecq6jOmYW37012/0QTiSo/Ukf0fhrHB7mUTGrNUQODfqayUly+eVTiHqX",
	"BI1fzY0gG9VFOsgZMluGBDMZL+6pGY66nzcRGSuNguyhupp2itKz+XsItxR+K2kh31xn2kbbwRHuMd+B",
	"c2T9DYs/hH/C4noM61l5to/1s5VsZXvTPA/87gUf5f91J/jQNfxbtCcb/wWhp8UTF471B1BfWi/fUkyC",
	"h14ubLP+a9Ynmy/JeqGdcvoaOTsE9kI12UZ39iojc6c6arLbHnn9jMuI/wLhWRrgnjuooBVxVVF0tlZd",
	"a71U5+V5CcNi+BkAAP//fz33LXMJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
