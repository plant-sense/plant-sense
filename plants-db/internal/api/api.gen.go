// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Factsheet defines model for factsheet.
type Factsheet struct {
	Id           *openapi_types.UUID `json:"id,omitempty"`
	Requirements Requirements        `json:"requirements"`
	Taxonomy     *Taxonomy           `json:"taxonomy,omitempty"`
}

// Plant defines model for plant.
type Plant struct {
	Id       openapi_types.UUID `json:"id"`
	Taxonomy Taxonomy           `json:"taxonomy"`
}

// Requirement defines model for requirement.
type Requirement struct {
	Max  float64 `json:"max"`
	Min  float64 `json:"min"`
	Unit string  `json:"unit"`
}

// Requirements defines model for requirements.
type Requirements struct {
	LightIntensity Requirement `json:"light_intensity"`
	SoilMoisture   Requirement `json:"soil_moisture"`
	Temperature    Requirement `json:"temperature"`
}

// SearchRequest defines model for search_request.
type SearchRequest struct {
	Name *string `json:"name,omitempty"`
}

// Taxonomy defines model for taxonomy.
type Taxonomy struct {
	CommonName     string `json:"common_name"`
	ScientificName string `json:"scientific_name"`
}

// PostSearchJSONRequestBody defines body for PostSearch for application/json ContentType.
type PostSearchJSONRequestBody = SearchRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /plants)
	GetPlants(w http.ResponseWriter, r *http.Request)

	// (GET /plants/{id})
	GetPlantsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (GET /plants/{id}/requirements)
	GetPlantsIdRequirements(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (GET /plants/{id}/taxonomy)
	GetPlantsIdTaxonomy(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (POST /search)
	PostSearch(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /plants)
func (_ Unimplemented) GetPlants(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /plants/{id})
func (_ Unimplemented) GetPlantsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /plants/{id}/requirements)
func (_ Unimplemented) GetPlantsIdRequirements(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /plants/{id}/taxonomy)
func (_ Unimplemented) GetPlantsIdTaxonomy(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /search)
func (_ Unimplemented) PostSearch(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetPlants operation middleware
func (siw *ServerInterfaceWrapper) GetPlants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlants(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPlantsId operation middleware
func (siw *ServerInterfaceWrapper) GetPlantsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlantsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPlantsIdRequirements operation middleware
func (siw *ServerInterfaceWrapper) GetPlantsIdRequirements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlantsIdRequirements(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPlantsIdTaxonomy operation middleware
func (siw *ServerInterfaceWrapper) GetPlantsIdTaxonomy(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlantsIdTaxonomy(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSearch operation middleware
func (siw *ServerInterfaceWrapper) PostSearch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSearch(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/plants", wrapper.GetPlants)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/plants/{id}", wrapper.GetPlantsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/plants/{id}/requirements", wrapper.GetPlantsIdRequirements)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/plants/{id}/taxonomy", wrapper.GetPlantsIdTaxonomy)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/search", wrapper.PostSearch)
	})

	return r
}

type GetPlantsRequestObject struct {
}

type GetPlantsResponseObject interface {
	VisitGetPlantsResponse(w http.ResponseWriter) error
}

type GetPlants200JSONResponse []Plant

func (response GetPlants200JSONResponse) VisitGetPlantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPlants500Response struct {
}

func (response GetPlants500Response) VisitGetPlantsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetPlantsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetPlantsIdResponseObject interface {
	VisitGetPlantsIdResponse(w http.ResponseWriter) error
}

type GetPlantsId200JSONResponse Factsheet

func (response GetPlantsId200JSONResponse) VisitGetPlantsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPlantsId404Response struct {
}

func (response GetPlantsId404Response) VisitGetPlantsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetPlantsId500Response struct {
}

func (response GetPlantsId500Response) VisitGetPlantsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetPlantsIdRequirementsRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetPlantsIdRequirementsResponseObject interface {
	VisitGetPlantsIdRequirementsResponse(w http.ResponseWriter) error
}

type GetPlantsIdRequirements200JSONResponse Requirements

func (response GetPlantsIdRequirements200JSONResponse) VisitGetPlantsIdRequirementsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPlantsIdRequirements404Response struct {
}

func (response GetPlantsIdRequirements404Response) VisitGetPlantsIdRequirementsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetPlantsIdRequirements500Response struct {
}

func (response GetPlantsIdRequirements500Response) VisitGetPlantsIdRequirementsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetPlantsIdTaxonomyRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetPlantsIdTaxonomyResponseObject interface {
	VisitGetPlantsIdTaxonomyResponse(w http.ResponseWriter) error
}

type GetPlantsIdTaxonomy200JSONResponse Taxonomy

func (response GetPlantsIdTaxonomy200JSONResponse) VisitGetPlantsIdTaxonomyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPlantsIdTaxonomy404Response struct {
}

func (response GetPlantsIdTaxonomy404Response) VisitGetPlantsIdTaxonomyResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetPlantsIdTaxonomy500Response struct {
}

func (response GetPlantsIdTaxonomy500Response) VisitGetPlantsIdTaxonomyResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostSearchRequestObject struct {
	Body *PostSearchJSONRequestBody
}

type PostSearchResponseObject interface {
	VisitPostSearchResponse(w http.ResponseWriter) error
}

type PostSearch200JSONResponse []Plant

func (response PostSearch200JSONResponse) VisitPostSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSearch400Response struct {
}

func (response PostSearch400Response) VisitPostSearchResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostSearch500Response struct {
}

func (response PostSearch500Response) VisitPostSearchResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /plants)
	GetPlants(ctx context.Context, request GetPlantsRequestObject) (GetPlantsResponseObject, error)

	// (GET /plants/{id})
	GetPlantsId(ctx context.Context, request GetPlantsIdRequestObject) (GetPlantsIdResponseObject, error)

	// (GET /plants/{id}/requirements)
	GetPlantsIdRequirements(ctx context.Context, request GetPlantsIdRequirementsRequestObject) (GetPlantsIdRequirementsResponseObject, error)

	// (GET /plants/{id}/taxonomy)
	GetPlantsIdTaxonomy(ctx context.Context, request GetPlantsIdTaxonomyRequestObject) (GetPlantsIdTaxonomyResponseObject, error)

	// (POST /search)
	PostSearch(ctx context.Context, request PostSearchRequestObject) (PostSearchResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetPlants operation middleware
func (sh *strictHandler) GetPlants(w http.ResponseWriter, r *http.Request) {
	var request GetPlantsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPlants(ctx, request.(GetPlantsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPlants")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPlantsResponseObject); ok {
		if err := validResponse.VisitGetPlantsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPlantsId operation middleware
func (sh *strictHandler) GetPlantsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetPlantsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPlantsId(ctx, request.(GetPlantsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPlantsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPlantsIdResponseObject); ok {
		if err := validResponse.VisitGetPlantsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPlantsIdRequirements operation middleware
func (sh *strictHandler) GetPlantsIdRequirements(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetPlantsIdRequirementsRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPlantsIdRequirements(ctx, request.(GetPlantsIdRequirementsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPlantsIdRequirements")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPlantsIdRequirementsResponseObject); ok {
		if err := validResponse.VisitGetPlantsIdRequirementsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPlantsIdTaxonomy operation middleware
func (sh *strictHandler) GetPlantsIdTaxonomy(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetPlantsIdTaxonomyRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPlantsIdTaxonomy(ctx, request.(GetPlantsIdTaxonomyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPlantsIdTaxonomy")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPlantsIdTaxonomyResponseObject); ok {
		if err := validResponse.VisitGetPlantsIdTaxonomyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSearch operation middleware
func (sh *strictHandler) PostSearch(w http.ResponseWriter, r *http.Request) {
	var request PostSearchRequestObject

	var body PostSearchJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSearch(ctx, request.(PostSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSearch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSearchResponseObject); ok {
		if err := validResponse.VisitPostSearchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SWb2/TPhDH30p0v9/D0AQY0pSHExKqkGACnk1V5SXXxSj2eefLtGrKe0e227VNO8o2",
	"BOxZUt+f730uvusd1GQcWbTioboDX7doVHxcqFp8iyjhxTE5ZNEYj3QTDYiNEqig73UDOcjSIVTghbW9",
	"giEHxuteM5p18P8ZF1DBf8UmZ7FKWOzYDjmIuiVLZnnM795u2CRsoLoA1ykrMBIxG/LVwVNrerauFHZ9",
	"OtvFtC/LqNsdXQ31lx1ulNneXCIHZUbbX7TsrY6ZRsWNhIZ4ecy/8pgdaOmu2E5ftTLXVtB6LctH9DzI",
	"8qS7uSHtpWd8pK+gccjq0Z6jmrfDjAXle+UFIB4V1+08BEF/oH9WGTzEevQp7TrVZAzZ+QO+OfhaoxW9",
	"0PVDNqO6tgPuu8+iHG0XFCNp6UKo83BPsjgFMo98o+vge4PsNVmooJy8npRBDTm0ymmo4O2knJSQg1PS",
	"xkKKeNni41UaJBT5arLTBir4gHKeLIJe78j6ROBNWSYQAXZ0VM51uo6uxXdPdjOt4u0VNEdnTLr5w/2N",
	"UMxqmXrRoK9ZO0mlff4YrN4lDbtHUyvIVnURCXKGzMQhxpCvqy3udDMcL3naRFKsDAqyh+pinCuGy6bv",
	"ITQnvCtpIV99UmmQbJos3GO+ReTIJBtmzyT+M9Cb1fEg3JPyZB/uJ5JsQb1tno2/GA+qY734sm2/15eX",
	"hX93l/6tDmyPt2P0v61tXzj5ra3/B6mnHRTXCPkDoM/Jy9dkk8ChlzNqlr+t7NESTLL+uXl+cgjsmWqy",
	"le7sVabtjep0k133yMsnNCP+IQi/pY+35w4qaEVcVRQd1apryUt1Wp6WMMyGHwEAAP//SCmXlX0LAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
